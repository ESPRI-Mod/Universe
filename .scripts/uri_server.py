from fastapi import APIRouter
from fastapi.responses import HTMLResponse
from poc_repo_api.code.onRepoChange.generate_graph import get_graph
from rdflib import query


# test_json="""
#
# {
#   "id": "ipsl",
#   "cmip_acronym": "IPSL",
#   "rorIdentifier": "02haar591",
#   "name": "Institut Pierre-Simon Laplace",
#   "url": [
#     "https://www.ipsl.fr/en/"
#   ],
#   "established": 1991,
#   "type": "Facility",
#   "labels": [],
#   "aliases": [
#     "Ipsl"
#   ],
#   "acronyms": [
#     "IPSL"
#   ],
#   "location": {
#     "id": "02haar591",
#     "lat": 48.855675,
#     "lon": 2.332105,
#     "city": "Paris",
#     "country": [
#       "France",
#       "FR"
#     ]
#   },
#   "@context": {
#     "comments": {
#       "description": "Auto generated by LinkML jsonld context generator",
#       "generation_date": "2024-07-03T15:39:03",
#       "source": "institution.yaml"
#     },
#     "@context": {
#       "esvocab": "http://127.0.0.1:8000/uri/",
#       "institution": "http://127.0.0.1:8000/uri/institution/",
#       "linkml": "https://w3id.org/linkml/",
#       "rdf": {
#         "@id": "http://www.w3.org/1999/02/22-rdf-syntax-ns",
#         "@prefix": true
#       },
#       "ror": "https://ror.org/",
#       "schema": "http://schema.org/",
#       "@vocab": "http://127.0.0.1:8000/uri/",
#       "acronyms": {
#         "@id": "institution:acronyms"
#       },
#       "aliases": {
#         "@id": "schema:alternateName"
#       },
#       "cmip_acronym": {
#         "@id": "cmip_acronym"
#       },
#       "established": {
#         "@type": "xsd:integer",
#         "@id": "schema:foundingDate"
#       },
#       "id": "@id",
#       "labels": {
#         "@id": "labels"
#       },
#       "location": {
#         "@type": "@id",
#         "@id": "schema:location"
#       },
#       "name": {
#         "@id": "name"
#       },
#       "rorIdentifier": {
#         "@id": "ror:id"
#       },
#       "type": {
#         "@id": "type"
#       },
#       "url": {
#         "@id": "url"
#       },
#       "validation_method": {
#         "@id": "institution:validation_method"
#       },
#       "city": {
#         "@id": "city"
#       },
#       "country": {
#         "@id": "country"
#       },
#       "lat": {
#         "@type": "xsd:float",
#         "@id": "lat"
#       },
#       "lon": {
#         "@type": "xsd:float",
#         "@id": "lon"
#       },
#       "@base": "http://127.0.0.1:8000/uri/",
#       "Institution": {
#         "@id": "institution"
#       },
#       "Location": {
#         "@id": "schema:location"
#       }
#     }
#   }
# }
#
#
# """
# g = Graph().parse(data=test_json, format='json-ld')
#
g = get_graph()




uri_router = APIRouter()


# For the time being just return json from desccribe the uri
# g is the global graph with all data .. 
# Generate HTML table





@uri_router.get("/uri/{uri_local:path}", response_class=HTMLResponse)
def serve_uri(uri_local:str):
    uri_str = f"<http://127.0.0.1:8000/uri/{uri_local}>"
    print(uri_str)

    query = f"DESCRIBE {uri_str}"
    qres = g.query(query)
    #breakpoint()
    response = []
    for r in qres: 
      response.append(r)
    #breakpoint()
    #print(uri_local)

    if len(response)==0:
        query = (
        f"SELECT ?s ?p ?o "
        f"WHERE {{?s ?p ?o . "
        f"    ?s {uri_str} ?o . "
        f"}}"
        )
        qres = g.query(query)
        response = []
        for r in qres: 
          response.append(r)


    html_content = """
    <!DOCTYPE html>
    <html>
        <head>
        <title>Triples Table</title>
        <style>
            table {
                width: 100%;
                border-collapse: collapse;
            }
            table, th, td {
                border: 1px solid black;
            }
            th, td {
                padding: 8px;
                text-align: left;
            }
            th {
                background-color: #f2f2f2;
            }
        </style>
    </head>
    <body>
        <h2>Triples Table</h2>
        <table>
            <tr>
                <th>Subject</th>
                <th>Predicate</th>
                <th>Object</th>
            </tr>
    """

    for triple in response:
        html_content += f"""
            <tr>
                <td>{triple[0]}</td>
                <td>{triple[1]}</td>
                <td>{triple[2]}</td>
            </tr>
        """

    html_content += """
        </table>
    </body>
    </html>
    """
    return html_content

